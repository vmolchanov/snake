{"version":3,"sources":["components/Game/swipe.svg","components/Game/keys.svg","components/Welcome/index.js","enums/mode.js","components/Mode/index.js","components/FieldCell/index.js","utils/point.js","utils/size.js","components/FieldRow/index.js","enums/direction.js","enums/key.js","enums/gesture.js","components/Game/index.js","App.js","reducers/mode.js","reducers/index.js","index.js"],"names":["module","exports","__webpack_require__","p","Welcome","props","react_default","a","createElement","className","react_router_dom","to","EMode","UNDEFINED","EASY","HARD","Mode","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","onLinkClick","bind","data-mode","e","onModeChoose","target","dataset","mode","Component","connect","dispatch","type","payload","FieldCell","style","coord","size","x","y","width","height","Point","arguments","length","undefined","_x","_y","value","Size","_width","_height","FieldRow","EMPTY_CELL_STYLE","fill","FILL_CELL_STYLE","row","rowIndex","map","cell","cellIndex","components_FieldCell","key","EDirection","TOP","RIGHT","BOTTOM","LEFT","EKey","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","EGesture","SWIPE_LEFT","SWIPE_RIGHT","SWIPE_UP","SWIPE_DOWN","Game","_this","direction","foodCell","emptyCell","isFirstShow","state","field","createField","onKeyUp","assertThisInitialized","onOverlayClick","onScreenResize","onContainerSwipe","_this2","container","document","querySelector","overlay","svg","addEventListener","window","hammertime","Hammer","get","set","forEach","eventName","on","setSvgSizes","removeEventListener","react_router","controlClassNames","concat","join","redirect","src","keysImage","swipeImage","viewBox","xmlns","index","components_FieldRow","Array","i","j","foodPoint","getFoodPoint","_this3","interval","setInterval","newField","move","clearInterval","setTimeout","reset","setState","classList","remove","slice","currentPartPoint","getPointByPart","nextPoint","getPointByDirection","currentPart","point","part","from","indexOf","points","push","Math","floor","random","_this$container$getBo","getBoundingClientRect","min","which","setDirection","preventDefault","contains","add","start","App","exact","path","component","initialState","combineReducers","action","parseInt","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.94089341.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/swipe.196428d2.svg\";","module.exports = __webpack_public_path__ + \"static/media/keys.590eca93.svg\";","import 'normalize.css';\nimport './style.css';\nimport React from 'react';\nimport {Link} from 'react-router-dom'\n\nfunction Welcome(props) {\n    return (\n        <div className='welcome'>\n            <div className=\"welcome__logo\">\n                <span>Snake</span>\n            </div>\n            <div className=\"welcome__link\">\n                <Link\n                    to='/mode'\n                    className='welcome__button'\n                >\n                    Играть\n                </Link>\n            </div>\n        </div>\n    );\n}\n\nexport default Welcome;","const EMode = {\n    UNDEFINED: -1,\n    EASY: 0,\n    HARD: 1\n};\n\nexport default EMode;","import './style.css';\nimport  React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport EMode from '../../enums/mode';\nimport {Link} from 'react-router-dom';\n\nclass Mode extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className='Mode'>\n                <ul className='Mode__list'>\n                    <li className='Mode__item'>\n                        <Link\n                            to='/game'\n                            className='Mode__link'\n                            onClick={this.onLinkClick.bind(this)}\n                            data-mode={EMode.EASY}\n                        >\n                            Легко\n                        </Link>\n                    </li>\n                    <li className='Mode__item'>\n                        <Link\n                            to='/game'\n                            className='Mode__link'\n                            onClick={this.onLinkClick.bind(this)}\n                            data-mode={EMode.HARD}\n                        >\n                            Сложно\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n\n    /**\n     * Обработчик события клика на ссылку.\n     * @param {Object} e\n     */\n    onLinkClick(e) {\n        this.props.onModeChoose(e.target.dataset.mode);\n    }\n}\n\nexport default connect(\n    null,\n    (dispatch) => ({\n        onModeChoose: (mode) => {\n            dispatch({\n                type: 'SET_MODE',\n                payload: mode\n            });\n        }\n    })\n)(Mode);\n","import React from 'react';\n\nfunction FieldCell(props) {\n    const {style, coord, size} = props;\n\n    return (\n        <rect\n            style={style}\n            x={coord.x}\n            y={coord.y}\n            width={size.width}\n            height={size.height}\n        />\n    );\n}\n\nexport default FieldCell;","/**\n * Класс, описывающий точку на площади\n */\nclass Point {\n    /**\n     * @param {number} x \n     * @param {number} y \n     * @constructor\n     */\n    constructor(x = 0, y = 0) {\n        this._x = x;\n        this._y = y;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set x(value) {\n        if (typeof value === 'number') {\n            this._x = value;\n        }\n    }\n\n    set y(value) {\n        if (typeof value === 'number') {\n            this._y = value;\n        }\n    }\n}\n\nexport default Point;\n","class Size {\n    constructor(width = 0, height = 0) {\n        this._width = width;\n        this._height = height;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    set width(value) {\n        if (typeof value === 'number' && value >= 0) {\n            this._width = value;\n        }\n    }\n\n    set height(value) {\n        if (typeof value === 'number' && value >= 0) {\n            this._height = value;\n        }\n    }\n}\n\nexport default Size;","import React from 'react';\nimport FieldCell from '../FieldCell';\nimport Point from '../../utils/point';\nimport Size from '../../utils/size';\n\nfunction FieldRow(props) {\n    const CELL_SIZE = 10;\n    const EMPTY_CELL_STYLE = {\n        fill: 'rgba(255, 255, 255, 0.15)'\n    };\n    const FILL_CELL_STYLE = {\n        fill: '#000000'\n    };\n    \n    const {row, rowIndex} = props;\n\n    return (\n        <g className='FieldRow'>\n            {\n                row.map((cell, cellIndex) => {\n                    return (\n                        <FieldCell\n                            key={cellIndex}\n                            style={cell === 0 ? EMPTY_CELL_STYLE : FILL_CELL_STYLE}\n                            coord={new Point(\n                                cellIndex * CELL_SIZE + cellIndex * 3 + 14,\n                                rowIndex * CELL_SIZE + rowIndex * 3 + 14\n                            )}\n                            size={new Size(\n                                CELL_SIZE,\n                                CELL_SIZE\n                            )}\n                        />\n                    )\n                })\n            }\n        </g>\n    );\n}\n\nexport default FieldRow;","const EDirection = {\n    TOP: 0,\n    RIGHT: 1,\n    BOTTOM: 2,\n    LEFT: 3\n};\n\nexport default EDirection;","const EKey = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13\n};\n\nexport default EKey;","const EGesture = {\n    SWIPE_LEFT: 'swipeleft',\n    SWIPE_RIGHT: 'swiperight',\n    SWIPE_UP: 'swipeup',\n    SWIPE_DOWN: 'swipedown'\n};\n\nexport default EGesture;\n","import './style.css';\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport FieldRow from '../FieldRow';\nimport EDirection from '../../enums/direction';\nimport EKey from '../../enums/key';\nimport EGesture from '../../enums/gesture';\nimport Point from '../../utils/point';\nimport {Redirect} from 'react-router-dom';\nimport * as Hammer from 'hammerjs';\nimport swipeImage from './swipe.svg';\nimport keysImage from './keys.svg';\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n\n        this.size = 10;\n        this.direction = EDirection.RIGHT;\n        this.foodCell = -1;\n        this.emptyCell = 0;\n        this.isFirstShow = true;\n\n        this.state = {\n            field: this.createField()\n        };\n\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onOverlayClick = this.onOverlayClick.bind(this);\n        this.onScreenResize = this.onScreenResize.bind(this);\n        this.onContainerSwipe = this.onContainerSwipe.bind(this);\n    }\n\n    componentDidMount() {\n        this.isFirstShow = false;\n        this.container = document.querySelector('.Game');\n        this.overlay = this.container.querySelector('.Game__overlay');\n        this.svg = this.container.querySelector('.Game__svg');\n\n        document.addEventListener('keyup', this.onKeyUp);\n        this.overlay.addEventListener('click', this.onOverlayClick);\n        window.addEventListener('resize', this.onScreenResize);\n\n        const swipes = ['swipeup', 'swiperight', 'swipedown', 'swipeleft'];\n        const hammertime = new Hammer(this.container);\n        hammertime.get('swipe').set({ direction: Hammer.DIRECTION_ALL });\n        swipes.forEach((eventName) => \n            hammertime.on(eventName, this.onContainerSwipe)\n        );\n\n        this.setSvgSizes();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keyup', this.onKeyUp);\n        this.overlay.removeEventListener('click', this.onOverlayClick);\n        window.removeEventListener('resize', this.onScreenResize);\n    }\n\n    /**\n     * Проверяет, установлен ли в сторе mode. Если нет, то происходит редирект на главную страницу.\n     */\n    redirect() {\n        return this.props.mode === 0 ?\n            <Redirect to='/' /> :\n            null;\n    }\n\n    render() {\n        const controlClassNames = [\n            'Game__control-list',\n            `${!this.isFirstShow ? 'Game__control-list_hidden' : ''}`\n        ].join(' ');\n        \n        return (\n            <div className='Game'>\n                {this.redirect()}\n                <div className='Game__overlay'>\n                    <p className='Game__overlay-text'>Нажмите для начала игры</p>\n                    <ul className={controlClassNames}>\n                        <li className=\"Game__control-item\">\n                            <img src={keysImage} className=\"Game__control-image\" />\n                        </li>\n                        <li className=\"Game__control-item\">\n                            <img src={swipeImage} className=\"Game__control-image\" />\n                        </li>\n                    </ul>\n                </div>\n                <svg\n                    className='Game__svg'\n                    width='400'\n                    height='400'\n                    viewBox='0 0 155 155'\n                    xmlns='http://www.w3.org/2000/svg'\n                >\n                    {\n                        this.state.field.map((row, index) => {\n                            return ( \n                                <FieldRow \n                                    row={row}\n                                    rowIndex={index}\n                                    key={index}\n                                />\n                            );\n                        })\n                    }\n                </svg>\n            </div>\n        );\n    }\n\n    /**\n     * Создание поля.\n     * @return {number[][]}\n     */\n    createField() {\n        const field = new Array(this.size);\n        for (let i = 0; i < field.length; i++) {\n            field[i] = new Array(this.size);\n        }\n        for (let i = 0; i < field.length; i++) {\n            for (let j = 0; j < field[i].length; j++) {\n                field[i][j] = 0;\n            }\n        }\n        field[3][2] = 1;\n\n        const foodPoint = this.getFoodPoint(field);\n        field[foodPoint.y][foodPoint.x] = this.foodCell;\n\n        return field;\n    }\n\n    /**\n     * Начало игры.\n     */\n    start() {\n        const interval = setInterval(() => {\n            const newField = this.move();\n\n            if (!newField) {\n                clearInterval(interval);\n                setTimeout(() => {\n                    this.reset();\n                }, 200);\n                return;\n            }\n\n            this.setState({\n                field: newField\n            });\n        }, this.props.mode);\n    }\n\n    /**\n     * Устанавливает начальное игровое состояние.\n     */\n    reset() {\n        this.direction = EDirection.RIGHT;\n        this.setState({\n            field: this.createField()\n        });\n        this.overlay.classList.remove('Game__overlay_hidden');\n    }\n\n    /**\n     * Делает один ход змейки.\n     * @return {?number[][]} - игровое поле после хода\n     */\n    move() {\n        let field = this.state.field.slice();\n        let currentPartPoint = this.getPointByPart(field, 1);\n        let nextPoint = this.getPointByDirection(currentPartPoint);\n        let currentPart = 1;\n\n        // Выход за пределы поля\n        if (\n            nextPoint.x < 0 ||\n            nextPoint.x >= this.size ||\n            nextPoint.y < 0 ||\n            nextPoint.y >= this.size\n        ) {\n            return null;\n        }\n\n        // Врезание в змейку\n        if (field[nextPoint.y][nextPoint.x] > this.emptyCell) {\n            return null;\n        }\n\n        // Еда\n        if (field[nextPoint.y][nextPoint.x] === this.foodCell) {\n            field = field.map((row) =>\n                row.map((cell) => \n                    cell > 0 ? ++cell : cell\n                )\n            );\n            field[nextPoint.y][nextPoint.x] = 1;\n            \n            const foodPoint = this.getFoodPoint(field);\n            field[foodPoint.y][foodPoint.x] = this.foodCell;\n\n            return field;\n        }\n\n        while (currentPartPoint !== null) {\n            field[nextPoint.y][nextPoint.x] = currentPart;\n            field[currentPartPoint.y][currentPartPoint.x] = this.emptyCell;\n            nextPoint = currentPartPoint;\n            currentPartPoint = this.getPointByPart(field, ++currentPart, nextPoint);\n        }\n\n        return field;\n    }\n\n    /**\n     * Возвращает координату следующей точки исходя из направления движения.\n     * @param {Point} point - Координата, относительно которой ведется поиск\n     * @return {Point}\n     */\n    getPointByDirection(point) {\n        switch (this.direction) {\n            case EDirection.TOP:\n                return new Point(point.x, point.y - 1);\n            case EDirection.RIGHT:\n                return new Point(point.x + 1, point.y);\n            case EDirection.BOTTOM:\n                return new Point(point.x, point.y + 1);\n            case EDirection.LEFT:\n                return new Point(point.x - 1, point.y);\n        }\n    }\n\n    /**\n     * Возвращает координату точки, значение которой равно part. Если from не передано, то поиск\n     * идет по всему массиву, иначе в точках вокруг from.\n     * @param {number[][]} field - Игровое поле\n     * @param {number} part - Значение ячейки, поиск которого осуществляется на игровом поле\n     * @param {?Point} from - Координата, относительно которой ведется поиск\n     * @return {Point}\n     */\n    getPointByPart(field, part, from = null) {\n        if (from !== null) {\n            // сверху\n            if (from.y - 1 >= 0 && field[from.y - 1][from.x] === part) {\n                return new Point(from.x, from.y - 1);\n            }\n            // справа\n            if (from.x + 1 < this.size && field[from.y][from.x + 1] === part) {\n                return new Point(from.x + 1, from.y);\n            }\n            // снизу\n            if (from.y + 1 < this.size && field[from.y + 1][from.x] === part) {\n                return new Point(from.x, from.y + 1);\n            }\n            // слева\n            if (from.x - 1 >= 0 && field[from.y][from.x - 1] === part) {\n                return new Point(from.x - 1, from.y);\n            }\n\n            return null;\n        }\n\n        for (let i = 0; i < field.length; i++) {\n            const j = field[i].indexOf(part);\n            if (j !== -1) {\n                return new Point(j, i);\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Возвращает случайную координату точки с едой.\n     * @param {number[][]} field - Игровое поле\n     * @return {Point}\n     */\n    getFoodPoint(field) {\n        const points = [];\n\n        field.forEach((row, i) => {\n            row.forEach((cell, j) => {\n                if (cell === 0) {\n                    points.push(new Point(j, i));\n                }\n            });\n        });\n\n        return points[Math.floor(Math.random() * (points.length - 1))];\n    }\n\n    /**\n     * Устанавливает размер svg-полю в зависимости от размера родительского контейнера.\n     */\n    setSvgSizes() {\n        const {width, height} = this.container.getBoundingClientRect();\n        let size = Math.min(Math.floor(width), Math.floor(height));\n        // 90% от размера контейнера\n        size = Math.floor(size * 0.9);\n        this.svg.style.width = `${size}px`;\n        this.svg.style.height = `${size}px`;\n    }\n\n    /**\n     * Устанавливает направление движения змейки.\n     * @param {EDirection} direction \n     */\n    setDirection(direction) {\n        switch (direction) {\n            case EDirection.TOP:\n                if (this.direction != EDirection.BOTTOM) {\n                    this.direction = EDirection.TOP;\n                }\n                break;\n            case EDirection.RIGHT:\n                if (this.direction != EDirection.LEFT) {\n                    this.direction = EDirection.RIGHT;\n                }\n                break;\n            case EDirection.BOTTOM:\n                if (this.direction != EDirection.TOP) {\n                    this.direction = EDirection.BOTTOM;\n                }\n                break;\n            case EDirection.LEFT:\n                if (this.direction != EDirection.RIGHT) {\n                    this.direction = EDirection.LEFT;\n                }\n                break;\n        }\n    }\n\n    /**\n     * Обработчик события нажатия на кнопку.\n     * @param {Object} e \n     */\n    onKeyUp(e) {\n        switch (e.which) {\n            case EKey.ARROW_UP:\n                this.setDirection(EDirection.TOP);\n                break;\n            case EKey.ARROW_RIGHT:\n                this.setDirection(EDirection.RIGHT);\n                break;\n            case EKey.ARROW_DOWN:\n                this.setDirection(EDirection.BOTTOM);\n                break;\n            case EKey.ARROW_LEFT:\n                this.setDirection(EDirection.LEFT);\n                break;\n        }\n    }\n\n    /**\n     * Обработчик события свайпа.\n     * @param {Object} e \n     */\n    onContainerSwipe(e) {\n        switch (e.type) {\n            case EGesture.SWIPE_UP:\n                this.setDirection(EDirection.TOP);\n                break;\n            case EGesture.SWIPE_RIGHT:\n                this.setDirection(EDirection.RIGHT);\n                break;\n            case EGesture.SWIPE_DOWN:\n                this.setDirection(EDirection.BOTTOM);\n                break;\n            case EGesture.SWIPE_LEFT:\n                this.setDirection(EDirection.LEFT);\n                break;\n        }\n    }\n\n    /**\n     * Обработчик события клика на оверлей.\n     * @param {Object} e \n     */\n    onOverlayClick(e) {\n        e.preventDefault();\n        if (!this.overlay.classList.contains('Game__overlay_hidden')) {\n            this.overlay.classList.add('Game__overlay_hidden');\n            this.start();\n        }\n    }\n\n    /**\n     * Обработчик события ресайза окна браузера.\n     * @param {Object} e \n     */\n    onScreenResize(e) {\n        this.setSvgSizes();\n    }\n}\n\nexport default connect(\n    (state) => ({\n        mode: state.mode\n    }),\n    null\n)(Game);","import './App.css';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport React, {Component} from 'react';\nimport Welcome from './components/Welcome';\nimport Mode from './components/Mode';\nimport Game from './components/Game';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"App__content\">\n                    <Router>\n                        <Switch>\n                            <Route exact path=\"/\" component={Welcome} />\n                            <Route path=\"/mode\" component={Mode} />\n                            <Route path=\"/game\" component={Game} />\n                        </Switch>\n                    </Router>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import EMode from '../enums/mode';\n\nconst initialState = 0;\n\nexport default function mode(state = initialState, action) {\n    switch (action.type) {\n        case 'SET_MODE':\n            switch (parseInt(action.payload)) {\n                case EMode.UNDEFINED:\n                    return 0;\n                case EMode.EASY:\n                    return 300;\n                case EMode.HARD:\n                    return 180;\n            }\n        default:\n            return state;\n    }\n}","import {combineReducers} from 'redux';\n\nimport mode from './mode';\n\nexport default combineReducers({\n    mode\n});","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport App from './App';\nimport reducer from './reducers';\n\nconst store = createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}