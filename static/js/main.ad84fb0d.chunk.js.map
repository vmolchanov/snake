{"version":3,"sources":["components/Welcome/index.js","enums/mode.js","components/Mode/index.js","components/FieldCell/index.js","utils/point.js","utils/size.js","components/FieldRow/index.js","enums/direction.js","enums/key.js","components/Game/index.js","App.js","reducers/mode.js","reducers/index.js","index.js"],"names":["Welcome","props","react_default","a","createElement","className","react_router_dom","to","EMode","UNDEFINED","EASY","HARD","Mode","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onClick","onLinkClick","bind","data-mode","e","onModeChoose","target","dataset","mode","Component","connect","dispatch","type","payload","FieldCell","style","coord","size","x","y","width","height","Point","arguments","length","undefined","_x","_y","value","Size","_width","_height","FieldRow","EMPTY_CELL_STYLE","fill","FILL_CELL_STYLE","row","rowIndex","map","cell","cellIndex","components_FieldCell","key","EDirection","TOP","RIGHT","BOTTOM","LEFT","EKey","ARROW_UP","ARROW_RIGHT","ARROW_DOWN","ARROW_LEFT","ENTER","Game","_this","direction","foodCell","emptyCell","state","field","createField","onKeyUp","assertThisInitialized","onOverlayClick","onScreenResize","container","document","querySelector","overlay","svg","addEventListener","window","setSvgSizes","removeEventListener","viewBox","xmlns","index","components_FieldRow","Array","i","j","foodPoint","getFoodPoint","_this2","interval","setInterval","newField","move","clearInterval","setTimeout","reset","setState","classList","remove","slice","currentPartPoint","getPointByPart","nextPoint","getPointByDirection","currentPart","point","part","from","indexOf","points","forEach","push","Math","floor","random","_this$container$getBo","getBoundingClientRect","min","concat","which","preventDefault","contains","add","start","App","react_router","exact","path","component","initialState","combineReducers","action","parseInt","store","createStore","reducer","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","src_App_0","getElementById"],"mappings":"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","file":"static/js/main.ad84fb0d.chunk.js","sourcesContent":["import 'normalize.css';\nimport './style.css';\nimport React from 'react';\nimport {Link} from 'react-router-dom'\n\nfunction Welcome(props) {\n    return (\n        <div className='welcome'>\n            <div className=\"welcome__logo\">\n                <span>Snake</span>\n            </div>\n            <div className=\"welcome__link\">\n                <Link\n                    to='/mode'\n                    className='welcome__button'\n                >\n                    Играть\n                </Link>\n            </div>\n        </div>\n    );\n}\n\nexport default Welcome;","const EMode = {\n    UNDEFINED: -1,\n    EASY: 0,\n    HARD: 1\n};\n\nexport default EMode;","import './style.css';\nimport  React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport EMode from '../../enums/mode';\nimport {Link} from 'react-router-dom';\n\nclass Mode extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render() {\n        return (\n            <div className='Mode'>\n                <ul className='Mode__list'>\n                    <li className='Mode__item'>\n                        <Link\n                            to='/game'\n                            className='Mode__link'\n                            onClick={this.onLinkClick.bind(this)}\n                            data-mode={EMode.EASY}\n                        >\n                            Легко\n                        </Link>\n                    </li>\n                    <li className='Mode__item'>\n                        <Link\n                            to='/game'\n                            className='Mode__link'\n                            onClick={this.onLinkClick.bind(this)}\n                            data-mode={EMode.HARD}\n                        >\n                            Сложно\n                        </Link>\n                    </li>\n                </ul>\n            </div>\n        );\n    }\n\n    /**\n     * Обработчик события клика на ссылку.\n     * @param {Object} e\n     */\n    onLinkClick(e) {\n        this.props.onModeChoose(e.target.dataset.mode);\n    }\n}\n\nexport default connect(\n    null,\n    (dispatch) => ({\n        onModeChoose: (mode) => {\n            dispatch({\n                type: 'SET_MODE',\n                payload: mode\n            });\n        }\n    })\n)(Mode);\n","import React from 'react';\n\nfunction FieldCell(props) {\n    const {style, coord, size} = props;\n\n    return (\n        <rect\n            style={style}\n            x={coord.x}\n            y={coord.y}\n            width={size.width}\n            height={size.height}\n        />\n    );\n}\n\nexport default FieldCell;","/**\n * Класс, описывающий точку на площади\n */\nclass Point {\n    /**\n     * @param {number} x \n     * @param {number} y \n     * @constructor\n     */\n    constructor(x = 0, y = 0) {\n        this._x = x;\n        this._y = y;\n    }\n\n    get x() {\n        return this._x;\n    }\n\n    get y() {\n        return this._y;\n    }\n\n    set x(value) {\n        if (typeof value === 'number') {\n            this._x = value;\n        }\n    }\n\n    set y(value) {\n        if (typeof value === 'number') {\n            this._y = value;\n        }\n    }\n}\n\nexport default Point;\n","class Size {\n    constructor(width = 0, height = 0) {\n        this._width = width;\n        this._height = height;\n    }\n\n    get width() {\n        return this._width;\n    }\n\n    get height() {\n        return this._height;\n    }\n\n    set width(value) {\n        if (typeof value === 'number' && value >= 0) {\n            this._width = value;\n        }\n    }\n\n    set height(value) {\n        if (typeof value === 'number' && value >= 0) {\n            this._height = value;\n        }\n    }\n}\n\nexport default Size;","import React from 'react';\nimport FieldCell from '../FieldCell';\nimport Point from '../../utils/point';\nimport Size from '../../utils/size';\n\nfunction FieldRow(props) {\n    const CELL_SIZE = 10;\n    const EMPTY_CELL_STYLE = {\n        fill: 'rgba(255, 255, 255, 0.15)'\n    };\n    const FILL_CELL_STYLE = {\n        fill: '#000000'\n    };\n    \n    const {row, rowIndex} = props;\n\n    return (\n        <g className='FieldRow'>\n            {\n                row.map((cell, cellIndex) => {\n                    return (\n                        <FieldCell\n                            key={cellIndex}\n                            style={cell === 0 ? EMPTY_CELL_STYLE : FILL_CELL_STYLE}\n                            coord={new Point(\n                                cellIndex * CELL_SIZE + cellIndex * 3 + 14,\n                                rowIndex * CELL_SIZE + rowIndex * 3 + 14\n                            )}\n                            size={new Size(\n                                CELL_SIZE,\n                                CELL_SIZE\n                            )}\n                        />\n                    )\n                })\n            }\n        </g>\n    );\n}\n\nexport default FieldRow;","const EDirection = {\n    TOP: 0,\n    RIGHT: 1,\n    BOTTOM: 2,\n    LEFT: 3\n};\n\nexport default EDirection;","const EKey = {\n    ARROW_UP: 38,\n    ARROW_RIGHT: 39,\n    ARROW_DOWN: 40,\n    ARROW_LEFT: 37,\n    ENTER: 13\n};\n\nexport default EKey;","import './style.css';\nimport React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport FieldRow from '../FieldRow';\nimport EDirection from '../../enums/direction';\nimport EKey from '../../enums/key';\nimport Point from '../../utils/point';\n\nclass Game extends Component {\n    constructor(props) {\n        super(props);\n\n        this.size = 10;\n        this.direction = EDirection.RIGHT;\n        this.foodCell = -1;\n        this.emptyCell = 0;\n\n        this.state = {\n            field: this.createField()\n        };\n\n        this.onKeyUp = this.onKeyUp.bind(this);\n        this.onOverlayClick = this.onOverlayClick.bind(this);\n        this.onScreenResize = this.onScreenResize.bind(this);\n    }\n\n    componentDidMount() {\n        this.container = document.querySelector('.Game');\n        this.overlay = this.container.querySelector('.Game__overlay');\n        this.svg = this.container.querySelector('.Game__svg');\n\n        document.addEventListener('keyup', this.onKeyUp);\n        this.overlay.addEventListener('click', this.onOverlayClick);\n        window.addEventListener('resize', this.onScreenResize);\n\n        this.setSvgSizes();\n    }\n\n    componentWillUnmount() {\n        document.removeEventListener('keyup', this.onKeyUp);\n        this.overlay.removeEventListener('click', this.onOverlayClick);\n    }\n\n    render() {\n        return (\n            <div className='Game'>\n                <div className='Game__overlay'>\n                    <p className='Game__overlay-text'>Нажмите для начала игры</p>\n                </div>\n                <svg\n                    className='Game__svg'\n                    width='400'\n                    height='400'\n                    viewBox='0 0 155 155'\n                    xmlns='http://www.w3.org/2000/svg'\n                >\n                    {\n                        this.state.field.map((row, index) => {\n                            return ( \n                                <FieldRow \n                                    row={row}\n                                    rowIndex={index}\n                                    key={index}\n                                />\n                            );\n                        })\n                    }\n                </svg>\n            </div>\n        );\n    }\n\n    /**\n     * Создание поля.\n     * @return {number[][]}\n     */\n    createField() {\n        const field = new Array(this.size);\n        for (let i = 0; i < field.length; i++) {\n            field[i] = new Array(this.size);\n        }\n        for (let i = 0; i < field.length; i++) {\n            for (let j = 0; j < field[i].length; j++) {\n                field[i][j] = 0;\n            }\n        }\n        field[3][2] = 1;\n\n        const foodPoint = this.getFoodPoint(field);\n        field[foodPoint.y][foodPoint.x] = this.foodCell;\n\n        return field;\n    }\n\n    /**\n     * Начало игры.\n     */\n    start() {\n        const interval = setInterval(() => {\n            const newField = this.move();\n\n            if (!newField) {\n                clearInterval(interval);\n                setTimeout(() => {\n                    this.reset();\n                }, 200);\n                return;\n            }\n\n            this.setState({\n                field: newField\n            });\n        }, this.props.mode);\n    }\n\n    /**\n     * Устанавливает начальное игровое состояние.\n     */\n    reset() {\n        this.direction = EDirection.RIGHT;\n        this.setState({\n            field: this.createField()\n        });\n        this.overlay.classList.remove('Game__overlay_hidden');\n    }\n\n    /**\n     * Делает один ход змейки.\n     * @return {?number[][]} - игровое поле после хода\n     */\n    move() {\n        let field = this.state.field.slice();\n        let currentPartPoint = this.getPointByPart(field, 1);\n        let nextPoint = this.getPointByDirection(currentPartPoint);\n        let currentPart = 1;\n\n        // Выход за пределы поля\n        if (\n            nextPoint.x < 0 ||\n            nextPoint.x >= this.size ||\n            nextPoint.y < 0 ||\n            nextPoint.y >= this.size\n        ) {\n            return null;\n        }\n\n        // Врезание в змейку\n        if (field[nextPoint.y][nextPoint.x] > this.emptyCell) {\n            return null;\n        }\n\n        // Еда\n        if (field[nextPoint.y][nextPoint.x] === this.foodCell) {\n            field = field.map((row) =>\n                row.map((cell) => \n                    cell > 0 ? ++cell : cell\n                )\n            );\n            field[nextPoint.y][nextPoint.x] = 1;\n            \n            const foodPoint = this.getFoodPoint(field);\n            field[foodPoint.y][foodPoint.x] = this.foodCell;\n\n            return field;\n        }\n\n        while (currentPartPoint !== null) {\n            field[nextPoint.y][nextPoint.x] = currentPart;\n            field[currentPartPoint.y][currentPartPoint.x] = this.emptyCell;\n            nextPoint = currentPartPoint;\n            currentPartPoint = this.getPointByPart(field, ++currentPart, nextPoint);\n        }\n\n        return field;\n    }\n\n    /**\n     * Возвращает координату следующей точки исходя из направления движения.\n     * @param {Point} point - Координата, относительно которой ведется поиск\n     * @return {Point}\n     */\n    getPointByDirection(point) {\n        switch (this.direction) {\n            case EDirection.TOP:\n                return new Point(point.x, point.y - 1);\n            case EDirection.RIGHT:\n                return new Point(point.x + 1, point.y);\n            case EDirection.BOTTOM:\n                return new Point(point.x, point.y + 1);\n            case EDirection.LEFT:\n                return new Point(point.x - 1, point.y);\n        }\n    }\n\n    /**\n     * Возвращает координату точки, значение которой равно part. Если from не передано, то поиск\n     * идет по всему массиву, иначе в точках вокруг from.\n     * @param {number[][]} field - Игровое поле\n     * @param {number} part - Значение ячейки, поиск которого осуществляется на игровом поле\n     * @param {?Point} from - Координата, относительно которой ведется поиск\n     * @return {Point}\n     */\n    getPointByPart(field, part, from = null) {\n        if (from !== null) {\n            // сверху\n            if (from.y - 1 >= 0 && field[from.y - 1][from.x] === part) {\n                return new Point(from.x, from.y - 1);\n            }\n            // справа\n            if (from.x + 1 < this.size && field[from.y][from.x + 1] === part) {\n                return new Point(from.x + 1, from.y);\n            }\n            // снизу\n            if (from.y + 1 < this.size && field[from.y + 1][from.x] === part) {\n                return new Point(from.x, from.y + 1);\n            }\n            // слева\n            if (from.x - 1 >= 0 && field[from.y][from.x - 1] === part) {\n                return new Point(from.x - 1, from.y);\n            }\n\n            return null;\n        }\n\n        for (let i = 0; i < field.length; i++) {\n            const j = field[i].indexOf(part);\n            if (j !== -1) {\n                return new Point(j, i);\n            }\n        }\n\n        return null;\n    }\n\n    /**\n     * Возвращает случайную координату точки с едой.\n     * @param {number[][]} field - Игровое поле\n     * @return {Point}\n     */\n    getFoodPoint(field) {\n        const points = [];\n\n        field.forEach((row, i) => {\n            row.forEach((cell, j) => {\n                if (cell === 0) {\n                    points.push(new Point(j, i));\n                }\n            });\n        });\n\n        return points[Math.floor(Math.random() * (points.length - 1))];\n    }\n\n    /**\n     * Устанавливает размер svg-полю в зависимости от размера родительского контейнера.\n     */\n    setSvgSizes() {\n        const {width, height} = this.container.getBoundingClientRect();\n        let size = Math.min(Math.floor(width), Math.floor(height));\n        // 90% от размера контейнера\n        size = Math.floor(size * 0.9);\n        this.svg.style.width = `${size}px`;\n        this.svg.style.height = `${size}px`;\n    }\n\n    /**\n     * Обработчик события нажатия на кнопку.\n     * @param {Object} e \n     */\n    onKeyUp(e) {\n        switch (e.which) {\n            case EKey.ARROW_UP:\n                if (this.direction != EDirection.BOTTOM) {\n                    this.direction = EDirection.TOP;\n                }\n                break;\n            case EKey.ARROW_RIGHT:\n                if (this.direction != EDirection.LEFT) {\n                    this.direction = EDirection.RIGHT;\n                }\n                break;\n            case EKey.ARROW_DOWN:\n                if (this.direction != EDirection.TOP) {\n                    this.direction = EDirection.BOTTOM;\n                }\n                break;\n            case EKey.ARROW_LEFT:\n                if (this.direction != EDirection.RIGHT) {\n                    this.direction = EDirection.LEFT;\n                }\n                break;\n        }\n    }\n\n    /**\n     * Обработчик события клика на оверлей.\n     * @param {Object} e \n     */\n    onOverlayClick(e) {\n        e.preventDefault();\n        if (!this.overlay.classList.contains('Game__overlay_hidden')) {\n            this.overlay.classList.add('Game__overlay_hidden');\n            this.start();\n        }\n    }\n\n    /**\n     * Обработчик события ресайза окна браузера.\n     * @param {Object} e \n     */\n    onScreenResize(e) {\n        this.setSvgSizes();\n    }\n}\n\nexport default connect(\n    (state) => ({\n        mode: state.mode\n    }),\n    null\n)(Game);","import './App.css';\nimport {HashRouter as Router, Route, Switch} from 'react-router-dom';\nimport React, {Component} from 'react';\nimport Welcome from './components/Welcome';\nimport Mode from './components/Mode';\nimport Game from './components/Game';\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <div className=\"App__content\">\n                    <Router>\n                        <Switch>\n                            <Route exact path=\"/\" component={Welcome} />\n                            <Route path=\"/mode\" component={Mode} />\n                            <Route path=\"/game\" component={Game} />\n                        </Switch>\n                    </Router>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import EMode from '../enums/mode';\n\nconst initialState = 0;\n\nexport default function mode(state = initialState, action) {\n    switch (action.type) {\n        case 'SET_MODE':\n            switch (parseInt(action.payload)) {\n                case EMode.UNDEFINED:\n                    return 0;\n                case EMode.EASY:\n                    return 1000;\n                case EMode.HARD:\n                    return 500;\n            }\n        default:\n            return state;\n    }\n}","import {combineReducers} from 'redux';\n\nimport mode from './mode';\n\nexport default combineReducers({\n    mode\n});","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {createStore} from 'redux';\nimport App from './App';\nimport reducer from './reducers';\n\nconst store = createStore(\n    reducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}